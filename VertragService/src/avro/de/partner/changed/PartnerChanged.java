/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.partner.changed;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PartnerChanged extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1696409522217735398L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PartnerChanged\",\"namespace\":\"de.partner.changed\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Name\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Name\",\"fields\":[{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"Address\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PartnerChanged> ENCODER =
      new BinaryMessageEncoder<PartnerChanged>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PartnerChanged> DECODER =
      new BinaryMessageDecoder<PartnerChanged>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PartnerChanged> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PartnerChanged> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PartnerChanged>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PartnerChanged to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PartnerChanged from a ByteBuffer. */
  public static PartnerChanged fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String id;
  @Deprecated public de.partner.changed.Name Name;
  @Deprecated public de.partner.changed.Address Address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PartnerChanged() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param Name The new value for Name
   * @param Address The new value for Address
   */
  public PartnerChanged(java.lang.String id, de.partner.changed.Name Name, de.partner.changed.Address Address) {
    this.id = id;
    this.Name = Name;
    this.Address = Address;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return Name;
    case 2: return Address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: Name = (de.partner.changed.Name)value$; break;
    case 2: Address = (de.partner.changed.Address)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'Name' field.
   * @return The value of the 'Name' field.
   */
  public de.partner.changed.Name getName() {
    return Name;
  }

  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(de.partner.changed.Name value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Address' field.
   * @return The value of the 'Address' field.
   */
  public de.partner.changed.Address getAddress() {
    return Address;
  }

  /**
   * Sets the value of the 'Address' field.
   * @param value the value to set.
   */
  public void setAddress(de.partner.changed.Address value) {
    this.Address = value;
  }

  /**
   * Creates a new PartnerChanged RecordBuilder.
   * @return A new PartnerChanged RecordBuilder
   */
  public static de.partner.changed.PartnerChanged.Builder newBuilder() {
    return new de.partner.changed.PartnerChanged.Builder();
  }

  /**
   * Creates a new PartnerChanged RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PartnerChanged RecordBuilder
   */
  public static de.partner.changed.PartnerChanged.Builder newBuilder(de.partner.changed.PartnerChanged.Builder other) {
    return new de.partner.changed.PartnerChanged.Builder(other);
  }

  /**
   * Creates a new PartnerChanged RecordBuilder by copying an existing PartnerChanged instance.
   * @param other The existing instance to copy.
   * @return A new PartnerChanged RecordBuilder
   */
  public static de.partner.changed.PartnerChanged.Builder newBuilder(de.partner.changed.PartnerChanged other) {
    return new de.partner.changed.PartnerChanged.Builder(other);
  }

  /**
   * RecordBuilder for PartnerChanged instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PartnerChanged>
    implements org.apache.avro.data.RecordBuilder<PartnerChanged> {

    private java.lang.String id;
    private de.partner.changed.Name Name;
    private de.partner.changed.Name.Builder NameBuilder;
    private de.partner.changed.Address Address;
    private de.partner.changed.Address.Builder AddressBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.partner.changed.PartnerChanged.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (other.hasNameBuilder()) {
        this.NameBuilder = de.partner.changed.Name.newBuilder(other.getNameBuilder());
      }
      if (isValidValue(fields()[2], other.Address)) {
        this.Address = data().deepCopy(fields()[2].schema(), other.Address);
        fieldSetFlags()[2] = true;
      }
      if (other.hasAddressBuilder()) {
        this.AddressBuilder = de.partner.changed.Address.newBuilder(other.getAddressBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PartnerChanged instance
     * @param other The existing instance to copy.
     */
    private Builder(de.partner.changed.PartnerChanged other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      this.NameBuilder = null;
      if (isValidValue(fields()[2], other.Address)) {
        this.Address = data().deepCopy(fields()[2].schema(), other.Address);
        fieldSetFlags()[2] = true;
      }
      this.AddressBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public de.partner.changed.PartnerChanged.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public de.partner.changed.PartnerChanged.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Name' field.
      * @return The value.
      */
    public de.partner.changed.Name getName() {
      return Name;
    }

    /**
      * Sets the value of the 'Name' field.
      * @param value The value of 'Name'.
      * @return This builder.
      */
    public de.partner.changed.PartnerChanged.Builder setName(de.partner.changed.Name value) {
      validate(fields()[1], value);
      this.NameBuilder = null;
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Name' field has been set.
      * @return True if the 'Name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'Name' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public de.partner.changed.Name.Builder getNameBuilder() {
      if (NameBuilder == null) {
        if (hasName()) {
          setNameBuilder(de.partner.changed.Name.newBuilder(Name));
        } else {
          setNameBuilder(de.partner.changed.Name.newBuilder());
        }
      }
      return NameBuilder;
    }

    /**
     * Sets the Builder instance for the 'Name' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public de.partner.changed.PartnerChanged.Builder setNameBuilder(de.partner.changed.Name.Builder value) {
      clearName();
      NameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Name' field has an active Builder instance
     * @return True if the 'Name' field has an active Builder instance
     */
    public boolean hasNameBuilder() {
      return NameBuilder != null;
    }

    /**
      * Clears the value of the 'Name' field.
      * @return This builder.
      */
    public de.partner.changed.PartnerChanged.Builder clearName() {
      Name = null;
      NameBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Address' field.
      * @return The value.
      */
    public de.partner.changed.Address getAddress() {
      return Address;
    }

    /**
      * Sets the value of the 'Address' field.
      * @param value The value of 'Address'.
      * @return This builder.
      */
    public de.partner.changed.PartnerChanged.Builder setAddress(de.partner.changed.Address value) {
      validate(fields()[2], value);
      this.AddressBuilder = null;
      this.Address = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Address' field has been set.
      * @return True if the 'Address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'Address' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public de.partner.changed.Address.Builder getAddressBuilder() {
      if (AddressBuilder == null) {
        if (hasAddress()) {
          setAddressBuilder(de.partner.changed.Address.newBuilder(Address));
        } else {
          setAddressBuilder(de.partner.changed.Address.newBuilder());
        }
      }
      return AddressBuilder;
    }

    /**
     * Sets the Builder instance for the 'Address' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public de.partner.changed.PartnerChanged.Builder setAddressBuilder(de.partner.changed.Address.Builder value) {
      clearAddress();
      AddressBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Address' field has an active Builder instance
     * @return True if the 'Address' field has an active Builder instance
     */
    public boolean hasAddressBuilder() {
      return AddressBuilder != null;
    }

    /**
      * Clears the value of the 'Address' field.
      * @return This builder.
      */
    public de.partner.changed.PartnerChanged.Builder clearAddress() {
      Address = null;
      AddressBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PartnerChanged build() {
      try {
        PartnerChanged record = new PartnerChanged();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        if (NameBuilder != null) {
          record.Name = this.NameBuilder.build();
        } else {
          record.Name = fieldSetFlags()[1] ? this.Name : (de.partner.changed.Name) defaultValue(fields()[1]);
        }
        if (AddressBuilder != null) {
          record.Address = this.AddressBuilder.build();
        } else {
          record.Address = fieldSetFlags()[2] ? this.Address : (de.partner.changed.Address) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PartnerChanged>
    WRITER$ = (org.apache.avro.io.DatumWriter<PartnerChanged>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PartnerChanged>
    READER$ = (org.apache.avro.io.DatumReader<PartnerChanged>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
