/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.vertrag.created;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VertragCreated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6320804018263872520L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VertragCreated\",\"namespace\":\"de.vertrag.created\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"Partner\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Partner\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]},{\"name\":\"sparte\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"beitrag\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VertragCreated> ENCODER =
      new BinaryMessageEncoder<VertragCreated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VertragCreated> DECODER =
      new BinaryMessageDecoder<VertragCreated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<VertragCreated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<VertragCreated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<VertragCreated>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this VertragCreated to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a VertragCreated from a ByteBuffer. */
  public static VertragCreated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String id;
  @Deprecated public de.vertrag.created.Partner Partner;
  @Deprecated public java.lang.String sparte;
  @Deprecated public double beitrag;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VertragCreated() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param Partner The new value for Partner
   * @param sparte The new value for sparte
   * @param beitrag The new value for beitrag
   */
  public VertragCreated(java.lang.String id, de.vertrag.created.Partner Partner, java.lang.String sparte, java.lang.Double beitrag) {
    this.id = id;
    this.Partner = Partner;
    this.sparte = sparte;
    this.beitrag = beitrag;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return Partner;
    case 2: return sparte;
    case 3: return beitrag;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: Partner = (de.vertrag.created.Partner)value$; break;
    case 2: sparte = (java.lang.String)value$; break;
    case 3: beitrag = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'Partner' field.
   * @return The value of the 'Partner' field.
   */
  public de.vertrag.created.Partner getPartner() {
    return Partner;
  }

  /**
   * Sets the value of the 'Partner' field.
   * @param value the value to set.
   */
  public void setPartner(de.vertrag.created.Partner value) {
    this.Partner = value;
  }

  /**
   * Gets the value of the 'sparte' field.
   * @return The value of the 'sparte' field.
   */
  public java.lang.String getSparte() {
    return sparte;
  }

  /**
   * Sets the value of the 'sparte' field.
   * @param value the value to set.
   */
  public void setSparte(java.lang.String value) {
    this.sparte = value;
  }

  /**
   * Gets the value of the 'beitrag' field.
   * @return The value of the 'beitrag' field.
   */
  public java.lang.Double getBeitrag() {
    return beitrag;
  }

  /**
   * Sets the value of the 'beitrag' field.
   * @param value the value to set.
   */
  public void setBeitrag(java.lang.Double value) {
    this.beitrag = value;
  }

  /**
   * Creates a new VertragCreated RecordBuilder.
   * @return A new VertragCreated RecordBuilder
   */
  public static de.vertrag.created.VertragCreated.Builder newBuilder() {
    return new de.vertrag.created.VertragCreated.Builder();
  }

  /**
   * Creates a new VertragCreated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VertragCreated RecordBuilder
   */
  public static de.vertrag.created.VertragCreated.Builder newBuilder(de.vertrag.created.VertragCreated.Builder other) {
    return new de.vertrag.created.VertragCreated.Builder(other);
  }

  /**
   * Creates a new VertragCreated RecordBuilder by copying an existing VertragCreated instance.
   * @param other The existing instance to copy.
   * @return A new VertragCreated RecordBuilder
   */
  public static de.vertrag.created.VertragCreated.Builder newBuilder(de.vertrag.created.VertragCreated other) {
    return new de.vertrag.created.VertragCreated.Builder(other);
  }

  /**
   * RecordBuilder for VertragCreated instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VertragCreated>
    implements org.apache.avro.data.RecordBuilder<VertragCreated> {

    private java.lang.String id;
    private de.vertrag.created.Partner Partner;
    private de.vertrag.created.Partner.Builder PartnerBuilder;
    private java.lang.String sparte;
    private double beitrag;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.vertrag.created.VertragCreated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Partner)) {
        this.Partner = data().deepCopy(fields()[1].schema(), other.Partner);
        fieldSetFlags()[1] = true;
      }
      if (other.hasPartnerBuilder()) {
        this.PartnerBuilder = de.vertrag.created.Partner.newBuilder(other.getPartnerBuilder());
      }
      if (isValidValue(fields()[2], other.sparte)) {
        this.sparte = data().deepCopy(fields()[2].schema(), other.sparte);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.beitrag)) {
        this.beitrag = data().deepCopy(fields()[3].schema(), other.beitrag);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VertragCreated instance
     * @param other The existing instance to copy.
     */
    private Builder(de.vertrag.created.VertragCreated other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Partner)) {
        this.Partner = data().deepCopy(fields()[1].schema(), other.Partner);
        fieldSetFlags()[1] = true;
      }
      this.PartnerBuilder = null;
      if (isValidValue(fields()[2], other.sparte)) {
        this.sparte = data().deepCopy(fields()[2].schema(), other.sparte);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.beitrag)) {
        this.beitrag = data().deepCopy(fields()[3].schema(), other.beitrag);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Partner' field.
      * @return The value.
      */
    public de.vertrag.created.Partner getPartner() {
      return Partner;
    }

    /**
      * Sets the value of the 'Partner' field.
      * @param value The value of 'Partner'.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder setPartner(de.vertrag.created.Partner value) {
      validate(fields()[1], value);
      this.PartnerBuilder = null;
      this.Partner = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Partner' field has been set.
      * @return True if the 'Partner' field has been set, false otherwise.
      */
    public boolean hasPartner() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'Partner' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public de.vertrag.created.Partner.Builder getPartnerBuilder() {
      if (PartnerBuilder == null) {
        if (hasPartner()) {
          setPartnerBuilder(de.vertrag.created.Partner.newBuilder(Partner));
        } else {
          setPartnerBuilder(de.vertrag.created.Partner.newBuilder());
        }
      }
      return PartnerBuilder;
    }

    /**
     * Sets the Builder instance for the 'Partner' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public de.vertrag.created.VertragCreated.Builder setPartnerBuilder(de.vertrag.created.Partner.Builder value) {
      clearPartner();
      PartnerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Partner' field has an active Builder instance
     * @return True if the 'Partner' field has an active Builder instance
     */
    public boolean hasPartnerBuilder() {
      return PartnerBuilder != null;
    }

    /**
      * Clears the value of the 'Partner' field.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder clearPartner() {
      Partner = null;
      PartnerBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sparte' field.
      * @return The value.
      */
    public java.lang.String getSparte() {
      return sparte;
    }

    /**
      * Sets the value of the 'sparte' field.
      * @param value The value of 'sparte'.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder setSparte(java.lang.String value) {
      validate(fields()[2], value);
      this.sparte = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sparte' field has been set.
      * @return True if the 'sparte' field has been set, false otherwise.
      */
    public boolean hasSparte() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sparte' field.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder clearSparte() {
      sparte = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'beitrag' field.
      * @return The value.
      */
    public java.lang.Double getBeitrag() {
      return beitrag;
    }

    /**
      * Sets the value of the 'beitrag' field.
      * @param value The value of 'beitrag'.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder setBeitrag(double value) {
      validate(fields()[3], value);
      this.beitrag = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'beitrag' field has been set.
      * @return True if the 'beitrag' field has been set, false otherwise.
      */
    public boolean hasBeitrag() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'beitrag' field.
      * @return This builder.
      */
    public de.vertrag.created.VertragCreated.Builder clearBeitrag() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VertragCreated build() {
      try {
        VertragCreated record = new VertragCreated();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        if (PartnerBuilder != null) {
          record.Partner = this.PartnerBuilder.build();
        } else {
          record.Partner = fieldSetFlags()[1] ? this.Partner : (de.vertrag.created.Partner) defaultValue(fields()[1]);
        }
        record.sparte = fieldSetFlags()[2] ? this.sparte : (java.lang.String) defaultValue(fields()[2]);
        record.beitrag = fieldSetFlags()[3] ? this.beitrag : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VertragCreated>
    WRITER$ = (org.apache.avro.io.DatumWriter<VertragCreated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VertragCreated>
    READER$ = (org.apache.avro.io.DatumReader<VertragCreated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
